@model KFZ_Konfigurator.ViewModels.ConfigurationOverviewPageViewModel

@{
    Layout = "~/Views/Shared/_ConfigurationLayout.cshtml";
    ViewBag.Title = LocalizationManager.Localize("ConfigurationOverviewView_Title");
}

<h2>@LocalizationManager.Localize("ConfigurationOverviewView_Header")</h2>

<div id="content">
    @Html.Partial("_ConfigurationOverview", Model.Configuration)
</div>

@* Order *@
<p>
    <button class="btn btn-dark" type="button" data-toggle="collapse" data-target="#orderCollapse">@LocalizationManager.Localize("ConfigurationOverviewView_Order_Button")</button>
</p>
<div class="collapse" id="orderCollapse">
    <div class="card card-body">
        <div class="input-group">
            <input type="text" class="form-control"
                   placeholder="@LocalizationManager.Localize("ConfigurationOverviewView_OrderDescription_Placeholder")"
                   v-model="configurationDescription" />
            <div class="input-group-append">
                <button class="btn btn-primary" id="placeOrderButton" type="button" data-target="#confirmPlaceOrderDialog" data-toggle="modal">
                    @LocalizationManager.Localize("ConfigurationOverviewView_PlaceOrder_Button")
                </button>
            </div>
        </div>
        <div class="mt-3">
            <div class="alert alert-danger fade show" id="orderFailedAlert" role="alert" hidden>
                Your order could not be placed
            </div>
        </div>
    </div>
</div>

<!-- Confirm Order Modal -->
<div class="modal fade" id="confirmPlaceOrderDialog" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@LocalizationManager.Localize("ConfigurationOverviewView_OrderConfirm_Title")</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>@LocalizationManager.Localize("ConfigurationOverviewView_OrderConfirm_Text")</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">@LocalizationManager.Localize("General_No")</button>
                <button type="button" class="btn btn-primary" data-dismiss="modal" @@click="placeOrder">
                    @LocalizationManager.Localize("General_Yes")
                </button>
            </div>
        </div>
    </div>
</div>

@section scripts {
    @if (!HttpContext.Current.IsDebuggingEnabled)
    {
        @Scripts.Render("~/bundles/configurationOverview")
    }
    <script type="module">
        let vm = null;
        let module = null;
        (async () => {
            if (@Json.Encode(HttpContext.Current.IsDebuggingEnabled) === false) {
                module = myBundle;
            } else {
                module = await import('/Views/ConfigurationOverview/Index.js');
            }

            let options = {
                antiForgeryToken: module.helper.getAntiForgeryToken($(document)),
                placeOrderSuccess: function (targetUrl) {
                    window.location.href = targetUrl;
                },
                placeOrderFailure: function () {
                    $('#orderFailedAlert').attr('hidden', false);
                }
            };
            let mixin = module.configurationOverviewViewModel.buildConfigOverviewViewModelVueMixin(options);
            vm = module.configurationViewModel.buildVue(@Html.Raw(Json.Encode(Model)), mixin);
        })();
    </script>
}

@*@section scripts {
        <script type="text/javascript" src="@Url.Content("/Scripts/app/ConfigurationOverviewViewModel.js")"></script>
        <script type="text/javascript">
            /** @@type {ConfigurationData} */
            let configurationData = @Html.Raw(Json.Encode(Model));
            let configViewModel = new ConfigurationViewModel(configurationData);
            let options = {
                antiForgeryToken: getAntiForgeryToken($(document)),
                placeOrderSuccess: function (targetUrl) {
                    window.location.href = targetUrl;
                },
                placeOrderFailure: function () {
                    $('#orderFailedAlert').attr('hidden', false);
                }
            };
            let configOverviewViewModel = new ConfigurationOverviewViewModel(options);

            ko.applyBindings({
                configViewModel: configViewModel,
                configOVW: configOverviewViewModel
            });
        </script>
    }*@
