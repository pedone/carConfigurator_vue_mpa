@using KFZ_Konfigurator.Helper;
@using KFZ_Konfigurator.Models;
@model KFZ_Konfigurator.ViewModels.EngineSettingsPageViewModel

@{
    Layout = "~/Views/Shared/_ConfigurationLayout.cshtml";
    ViewBag.Title = LocalizationManager.Localize("EngineSettingsView_Title");
}

<div class="list-group">
    @foreach (var item in Model.EngineSettings)
    {
        <a class="list-group-item list-group-item-light list-group-item-action rounded-0 d-flex align-items-lg-center @MiscHelper.If(item.IsSelected, "active")"
           data-toggle="list" @@click="selectEngineSettings(@item.Id)">
            <div class="flex-column w-100 align-items-lg-start">
                <div class="d-flex w-100 justify-content-between">
                    <h5 class="mb-1">
                        @($"{Html.DisplayFor(_ => item.Engine.Liter)} {LocalizationManager.LocalizeCategory<EngineCategory>(item.Engine.EngineKind)} {Html.DisplayFor(_ => item.Gears)}{LocalizationManager.Localize("TechnicalData_Transmission_Suffix")} {MiscHelper.If(item.WheelDrive == WheelDriveKind.All, LocalizationManager.Localize("TechnicalData_Transmission_Allroad"))}")
                    </h5>
                    <h5 class="mb-1">@Html.DisplayFor(_ => item.Price)</h5>
                </div>
                <div class="mt-2 row">
                    <span class="col-sm-4">
                        <img src="~/Resources/Images/acceleration.svg" class="indicatior-icon" title="@LocalizationManager.Localize("TechnicalData_Acceleration")" />
                        @Html.DisplayFor(_ => item.Acceleration) s
                    </span>
                    <span class="col-sm-4">
                        <img src="~/Resources/Images/consumption.svg" class="indicatior-icon" title="@LocalizationManager.Localize("TechnicalData_Consumption")" />
                        @Html.DisplayFor(_ => item.Consumption) l/100 km
                    </span>
                    <span class="col-sm-4">
                        <img src="~/Resources/Images/performance.svg" class="indicatior-icon" title="@LocalizationManager.Localize("TechnicalData_Performance")" />
                        @Html.DisplayFor(_ => item.Engine.Performance) kW (@Html.DisplayFor(_ => item.Engine.PerformancePS) PS)
                    </span>
                    <span class="col-sm-4">
                        <img src="~/Resources/Images/emissions.svg" class="indicatior-icon" title="@LocalizationManager.Localize("TechnicalData_Emissions")" />
                        @Html.DisplayFor(_ => item.Emission) g/km
                    </span>
                    <span class="col-sm-4">
                        <img src="~/Resources/Images/topSpeed.svg" class="indicatior-icon" title="@LocalizationManager.Localize("TechnicalData_TopSpeed")" />
                        @Html.DisplayFor(_ => item.TopSpeed) km/h
                    </span>
                    <span class="col-sm-4">
                        <img src="~/Resources/Images/engineSize.svg" class="indicatior-icon" title="@LocalizationManager.Localize("TechnicalData_EngineSize")" />
                        @Html.DisplayFor(_ => item.Engine.Size) cm<sup>3</sup>
                    </span>
                </div>
            </div>
        </a>
    }
</div>

<div class="d-flex justify-content-end mt-3">
    <a class="btn btn-outline-dark" href="@Url.RouteUrl(Constants.Routes.Accessories)">@LocalizationManager.Localize("EngineSettingsView_ContinueToAccessories_Button")</a>
</div>

@section scripts {
    @if (!HttpContext.Current.IsDebuggingEnabled)
    {
        @Scripts.Render("~/bundles/engineSettings")
    }
    <script type="module">
        let vm = null;
        let module = null;
        (async () => {
            if (@Json.Encode(HttpContext.Current.IsDebuggingEnabled) === false) {
                module = myBundle;
            } else {
                module = await import('/Views/EngineSettings/Index.js');
            }
            vm = module.configurationViewModel.buildVue(@Html.Raw(Json.Encode(Model)));
        })();
        $(window).on('beforeunload', () => vm.saveChanges(module.helper.getAntiForgeryToken($(document))));
    </script>
}